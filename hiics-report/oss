ITのäæ、アップストリームをèåたちでéçしないと、ääにäられたものをåけåってäæでåæää、ææつらいつらいとæうだけのääしかææにæらないよ。
で、アップストリームæåするなら、それèäをäにèäしないとèåäたちがつらいæいをしてèåのçåでååするだけになる。これはフルタイムエンジニアとはèわない。äをåしçいてもアップストリームæåするçåをäる、それがéè。
åしéæになるけど、これはæèなんだよ。それもソリティアおじさんやパワポおじさんをéわせるよりはåçマシなリターンがèèめるæèなんだ。




On Jan 15, 2016, at 07:30, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

http://zasshi.news.yahoo.co.jp/article?a=20160114-00010008-dime-sci …

On Jan 12, 2016, at 22:09, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

ææåæèに取り組むにしても、標準の中のニッチな独自機能の押し付けをどれだけできるかが問われてしまうのが日本の会社。そうじゃなくて本流を支えるっていう矜持を持てるものだけが、本流になれるんだぜ？

要するに、国際会議に出かけて行ってはコソ泥の真似だけしているのが問題。既存の技術のメンテナンスが本流なんだよ。そのコストを払おうともしないで、自分は美味しい実だけ取れるなんて思うんじゃないよ。


On Jan 12, 2016, at 22:07, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

特に汎用性が高い部品やらを開発・製造している会社の場合、営業の前にやることあるんじゃないかな。売り込んでも売れない状況に置かれていないか念入りに調べる必要があるかと。例えば業界の世界標準規格があるか、あるならば自社の製品が準拠しているか…なければ標準化を提案できないか…みたいに。
日本メーカの営業や経営陣は逆に「弊社独自仕様」で顧客を囲い込むのに必死だからなあ。その上更に「負荷」価値という小さな親切大きなお世話の押し売り付き。
「負荷」価値いいね。「被差別化」技術ってのも。

On Jan 12, 2016, at 21:23, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

https://wirelesswire.jp/2016/01/49267/

今後、おそらくもはや疑いようもないことは、数少ない例外を覗いては、ソフトウェアはオープンソースでなければ生き残れないということです。特にプロが使うものほどそうです。

　2015年はそれが決定的になった年でした。

　昨年はPFI(Preferred Infrastructure)社のChainerや、GoogleのTensorFlow、Facebookのtorch7といったディープラーニング(深層学習)向けのフレームワークがオープンソースになりました。

　筆者らが開発したディープラーニング用のGUI環境、DEEPstation(https://github.com/uei/deepstation)を同様にオープンソースソフトウェアとして無償公開したのも、オープンソースでなければソフトウェアは生き残れないという判断があるからです。

　オープンソースでなければ生き残れないというのはどういうことでしょうか。

　例えば従来なら、筆者らが所属する株式会社UEIのようなソフトハウスにとって、DEEPstationのようなGUI環境はそれだけで飯の種でした。

　ディープラーニングに興味のある企業に営業して、いくばくかのライセンス料と保守費用を頂戴してビジネスを展開する。これはこれで堅実なビジネスです。

　かつてのミドルウェアビジネスとはまさしくそのようなものでした。
　しかし現在は事情が大きく異なってきています。

　結局、そのやり方で儲けられるケースというのがどんどん減ってきているからです。

　従来、ミドルウェアとは囲い込みのビジネスでした。
　一度顧客を掴んだら、顧客が他のミドルウェアへスイッチするコストが高ければ高いほどこちらは利ざやを多く稼ぐことが出来ます。

　しかし当然ながら、そんなことをすれば最終的には顧客が損をします。
　顧客が損をすることが前提のビジネスというのは基本的に不健全なわけです。

　ビジネスとは営業、開発、製造のあらゆる局面で局所最適化が起きます。
　そして局所最適が全体最適であるとは限らないというのが最適化という問題全体の重要なポイントです。

　営業レベルでいえば、一度掴んでしまった顧客が離れ難くすること、すなわちスイッチングコストを上げることは局所最適化されています。

　しかし開発レベルでは、他社のスイッチングコストが高い技術は自社でもスイッチングコストが高い技術になり、ビジネスが拡大した際に新しい技術者を雇用したり教育したりすることにコストがかかってしまいます。つまり営業部単体では最適化されているように思えても、会社全体としては最適化されているとは必ずしも言えないのです。

　営業マンからすれば「開発者の育成や教育が間に合わないのは開発部と人事部の責任」と逃れることができるので、しわ寄せはそちらに行きます。

　開発部からすれば、教育コストの高い自社の専用ミドルウェアよりも、(他社でも使っている)教育コストの低い汎用的なオープンソースのミドルウェアを使いたいと考えるのが普通です。

　かつてはソフトハウスのミドルウェアは独自性が高ければ高いほど良かった時代があります。
　それはミドルウェアとしてのアイデアそのものよりも、泥臭いノウハウが凝縮されていることの方が重要な場面では特にそうでした。

　例えばスマートフォン以前の携帯電話サイトや、金融、会計関連のミドルウェアなどです。

　ところが今やスマートフォン向けのサイトはオープンソースのミドルウェアで十分作れるようになりましたし、特殊なノウハウも必要ありません。

　ソフトハウスの差別化は、ますます難しくなっています。
　
　するとソフトハウスはどのようにして差別化していかなければならないのでしょうか。

　筆者が考えるソフトハウスの差別化要因は以下の点です。

実績
企画の独創性
技術の独自性
価格競争力
　ソフトハウスにとって、最も重要な差別化要因のひとつは実績です。
　これは長く続ければ続けるほど積み上げていけるのでRPG式に増えていきます。

　実績が少ないうちは利益がでない仕事でもやらざるを得ませんが、実績がついてくると安心して任せていただけるようになります。

　次に重要なのは、企画の独創性です。
　独立系ソフトハウスでは、意外にも技術よりも企画の独創性の方が強く問われるのです。
　

　企画の独創性が高いと、クライアントの想像力を喚起させます。
　クライアントとのコミュニケーションの中で、新しい提案ができるようになります。

　クライアントにとって最も価値の高いソフトハウスは、自らの想像力を高めてくれるパートナーとしてのソフトハウスです。

　与えられた仕事をただ淡々とこなすのではなく、独自のアイデアや工夫を盛り込みながらシステムを形にしていくソリューションを提案できる相手です。これこそが本来は交換不可能な価値であり、ミドルウェアのスイッチングコストなど、ほとんど問題になりません。

　過去、さまざまなクライアント様から、別の会社のミドルウェアを使用していて、スイッチングコストが高いことを承知で、弊社のミドルウェアに乗り換えたいという相談をいただくようになりました。

　なぜそう考えたのか伺うと、誰もが「彼らはミドルウェア以外には何も提供してくれないんだ」という嘆きにも似た感想を抱いていました。

　そう、クライアントにとって必要なのは、ロボットや自動販売機のように淡々と機能を提供してくれるだけの下請け先ではなく、クライアントにとって不得意な分野を補ってくれるパートナーとしてのサービスだったのです。そういうサービスでよければ、月額数百円から運営できるサーバーが世の中にはゴマンとあります。それでは満足できないから我々のような会社に相談を頂くわけです。

　そこで我々は、押し売りのように営業を掛けるのではなく、リピーターとなってくださるごく少数のクライアント様と、口コミやインバウンドでご相談いただく新規のクライアント様に集中してサービスを行うことで実績を積み重ねてきました。

　つまり、中小のソフトハウスにとって重要なのはクライアントとのコミュニケーション能力であり、彼らの想像力を刺激し、我々の得意分野がクライアントのやりたいことやクライアントの持つアセットと組み合わさるとどのような世界が実現できるのか、一緒に考えるという機能です。

　技術の独自性が差別化要因で企画の独創性の次に来るのはそういうことです。

　世の中には技術だけに優れた会社は星の数ほどあります。
　ソフトハウスの営業マンが言う、天才プログラマー、天才エンジニア、と呼ばれる人も、会社と部署の数だけ居ると考えてください。それは草野球チームのどのチームにも「エースで四番」が居るようなもので、どの部署でも消去法で一人の天才プログラマーが選ばれるのです。

　ですからそういう品のないセールストークには騙されないようにクライアントも訓練されています。
　

　どんな天才プログラマーであろうと、それが何万人いようと、それを率いる企画マンが次第では、彼らの能力は並以下しか発揮されません。天才プログラマーはよくスーパーカーに例えられますが、ポルシェを並の人が運転しても、その能力を限界まで引き出せるわけはありません。

　それができるクライアントも稀にいますが、そんなケースは非常に特殊で、そこにはやはり優れた企画マンが間に入ることが必要です。この企画マンはエンジニア出身のことも少なくありません。

　逆に卓越した企画マンのもとでは、凡庸なエンジニアも自分の能力以上の仕事をすることができます。
　

　となると、技術そのものの独自性というのはソフトハウスにとって相対的に低い価値になります。
　むしろ独自性の強い技術にこだわると、人材の流動性が下がり、必要なときに必要なだけの人材を確保することができなくなります。

　しかしソフトハウスとしての技術力をデモンストレーションする場がないのも困ります。

　このソフトハウスにはこんな技術があって、こんなエンジニアがいるんだぞということを内外に示すアドバルーンのようなものがないと、優秀なエンジニアを集めることは難しくなりますし、クライアントにしても「あなたがたには本当に技術があるのかね」と疑われてしまいます。

　そういうときの唯一の選択肢が、社内のミドルウェアをオープンソースソフトウェアにすることなのです。

　社内のミドルウェアをオープンソースにすることは一見、宝の山を道端に放り捨てるようにみえるかもしれません。
　しかし実際には違います。

　
　まず第一に、ミドルウェアがオープンソースになっていようがなっていまいが、それを使おうとするクライアントにとっては万が一、依頼先が倒産したとしてもオープンソースのミドルウェアを使っていることでスイッチングコストが下がるので導入メリットはむしろ上がります。

　第二に、競争相手となる別のソフトハウスがこちらのオープンソース・ソフトウェアをまるごと盗んだとします。しかし今の大半のオープンソースのライセンス規約では、どのオープンソース・ソフトウェアを用いたか明記しなければならないため、競争相手は間接的にせよこちらの宣伝にも加担しなければなりませんし、それ以上に、競合のオープンソース・ソフトウェアを使うということは、自社にそれに匹敵する技術がないと自白しているも同然です。

　オープンソース・ソフトウェアの世界では、どの会社がどのような技術をオープンにしているか常に相互監視されているため、みっともないことをすればすぐに批判の的に晒されます。このあたりはブロックチェーンと仕組みが似ているかもしれません。人力ですが。

　したがってまともな神経の会社なら、競合のものを丸パクリしたりはしませんし、仮にしたとすれば軽蔑され、その会社にはまともなエンジニアは転職しなくなります。もし、その会社にまともなエンジニアが勤めていれば、たぶんパクり元の会社への転職を希望するでしょう。

　第三に、技術そのものはもはやクライアントがソフトハウスを選択する決定打にはなり得ません。
　そしてオープンソース・ソフトウェアとして自社のミドルウェアを公開していることが、そのまま実績に繋がります。
　この世界で実績ほど価値が高いものはありません。

　ただしこの戦略には明確な弱点があります。
　それは常にホンモノの競争に晒されるということです。

　今回の記事では主に中小ソフトハウスを題材にしましたが、同様のことは大企業でも起きています。
　なぜなら、オープンソース・ソフトウェアにした瞬間、それを作った組織の大小を問わず、全世界的な競争の舞台に晒されるからです。

　例えば日本のベンチャー企業であるPFIの子会社、PFNが公開しているChainer(https://github.com/pfnet/chainer/tree/master/)はスターが1000件、Forkが184件ですが、Chainerよりも性能が劣るGoogleのTensorFlow(https://github.com/tensorflow/tensorflow)はスターが15000件以上、Forkは4000件以上です。

　これは技術力ではなく、圧倒的な知名度の差です。

　どれだけ技術的に優れていても、オープンソースで戦う以上はこうした世界での闘いも覚悟しなければなりません。
　

　それでもPFIとGoogleの企業としての規模の差を考えると、1000件と15000件、わずか15倍の差まで縮まった、と考えることもできます。

　それだけオープンソースは動きが激しく、また挑戦者にもチャンスがあるわけです。

　ちなみにTensorFlowがどれくらいの人気なのか推し量る指標として、MicrosoftのGithubアカウントも調べてみました。

スクリーンショット 2016-01-06 3.39.33

　Microsoftは意外にもGithubの積極的な活用を推し進めていて、MicrosoftのGithubアカウントを持つコントリビューターは1000人以上、人気のあるプロジェクトは、VisualStudio Code(https://github.com/Microsoft/vscode)　などで、スターが9000以上、Forkが1000以上となっています。

　MicrosoftのGithubアカウントを見ると残酷なまでにプロジェクトごとの人気・不人気の差がわかります。
　スターが0、Forkひとケタ台のプロジェクトも少なくなく、逆に言えば国産のオープンソースプロジェクトでもMicrosoftの個別のプロジェクトに負けてないものがけっこうあるということです。

　ちなみに国産オープンソースであり、世界的人気を誇るRuby言語のプロジェクトはやはりスター8000以上、Forkが2000以上なので、このあたりがGithubにおけるトップエンドと言えるでしょう。

　そうしたものと比較すると、登場からわずか数ヶ月でスター15000を獲得したTensorFlowがいかに絶大な影響力を持っているかわかります。

　GithubでTensorFlowに匹敵する人気を誇るオープンソース・ソフトウェアは、AppleのSwift(https://github.com/apple/swift)です。2万5千を超えるスターと3000以上のForkがあります。

　世界的な大企業がこうしたオープンソースの場で積極的に自社の技術を発表していくのは、そうした技術を囲い込むことにさほど大きな意味がないと気づいているからです。

　それよりも、むしろこういうオープンな場で様々な開発者や開発者予備軍に使ってもらって、自社により優秀なエンジニアを呼び込んだり、自社のミドルウェアをより高いレベルのものにしたりといったことに集中するほうが、ソフトウェアを囲い込むよりもはるかに有意義であると判断したからでしょう。

　今後も各企業がGithub上でいかにエンジニアの人気を集めるか、ということは重要な指標になっていくと思われます。



On Jan 12, 2016, at 06:04, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

顧客を直接囲い込んで利益を上げる収益モデルの企業では、OSSが利敵行為に見えてしまって、あるソフトを公開しても、コア部分は囲い込んでしまったりする。
顧客囲い込み戦略って、短期的には収益が上がるなロジックが成り立つので好まれるが、今では絶対スケールしない。ソフトウェア開発のプレイヤーの絶対数が増えすぎたので、昔みたいにニッチから初めて大きくする過程で、他のプレイヤーに食われる。
OSSにすることで、後発参入組を自らのプロジェクトに組み込んでしまう手はある。だけどそれはフルオープンな開発でなければならない。言い換えると、能力があればのし上がれる環境であると認識させ、実際に人材をどんどん採ることで、他者が組織化する余裕を与えない。
うーん、そうするとフルOSSの勝ちパターンって、まだ他の勘違いOSSプロジェクトがあるところに出ていき、ゆるくて完全に公開された開発コミュニティを作り上げ、積極的に他社からの貢献を採用し、人材を引き抜く、という事になるのか。
いい加減、開発体制がオープンでないソフトウェアはpublished source softwareというOSSとは別の何かと認識できるようにすればどうか。

On Jan 10, 2016, at 20:24, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

しかし本当にガチで日本の大手ヤバイ。OSSによる変化の分析と対応が全く出来ていない。
On Jan 10, 2016, at 20:19, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

既にあるOSSの開発を乗っ取るぐらいの気概は見せないと投資が無駄になるんですが。 

On Jan 10, 2016, at 20:18, Kotaro Hashimoto <hasimoto.kotaro@gmail.com> wrote:

どこかに今現在ソフトウェアとかサービスとかを超えて、色んな物がOSS化する価値（あるいはビジネスモデル）の転換が既に起きていることを説明している文書とかはないだろうか。
モノを市場で売ることから、市場の占有率を増やす戦略が生まれたのと同様に、技術そのものの市場が出来上がっていて、その占有率を増やすための戦いが、大手IT企業がOSS開発を進めているという事象となっていることを説明しなければならない。
OSS開発というのは、人々の興味というか技術的なリスペクトや、第三者が活動できる場を提供できるオーナーであることを広告材料として、自社のサービスや商売の裏付け、他社との差別化にすることに変化していっている。
OSS開発の意義が、ビジネスの裏付けとして認識され始めているのに、それが言語化されていないので、金と権力を持ったおじさんたちに認識されないため、いつまで経っても低レベルな議論、いわゆるOSSは利敵行為だというところで話が止まってしまう。
OSSの開発に加担することが利敵行為であり、OSSはフリーライドして自社のサービスで稼ぐべきである、という理解で商売をしている間に、他社は着実にオープンな開発を行うことで自社のレベルを上げつつ、技術市場のデファクトを占有し始めているというのに。
結局この転換に気がつけた所は早期に手を打って低コストで技術市場（および技術者市場）の占有率を高めることができるが、後追いをする場合にはその何倍ものコストを払って占有率を高めていかないといけなくなる。技術者のコストが上がってしまっているのでペイしない。
OSS開発の場合、既存の技術者を転換するのにも教育コストがかかる（主に他社の人間とどうやって協調して仕事すすめるかというところが）ので、ソフトウェア技術者集めたから大丈夫とは全く言えないところがある。
大体国内大手企業がOSSに力入れます、って言った場合、「利敵行為を避けるためにフリーライダーのSEを多数養成します」っていう意味だからな。これがまともに「OSSの陣取りゲームで一角を取るためにOSS貢献します」だったら救われるのだけども。
なんか開発部門や研究部門だけでこれ以上現状を打破するのは非常に困難というか無理ゲーという気がしてならない。他人事と思っている人事（OSS開発が出来る人材は貴重です）や経理（開発収支だけでは赤字になる）といったところも協力しないと無理。
無論ビジネス戦略を考えるべき企画部門も、OSS活動を前提としてどうやって製品やサービスの魅力と繋いでいくか、またOSSの陣取りゲームをどうやって進めて技術市場のシェアを増やすかという戦略も立てねばならない。
